var searchIndex = {};
searchIndex['simple_parallel'] = {"items":[[0,"","simple_parallel","Straight-forward functions and types for basic data parallel\noperations.",null,null],[5,"for_","","Execute `f` on each element of `iter`, in their own `scoped`\nthread.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":null}],[5,"both","","Execute `f` on both `x` and `y`, in parallel, returning the\nresult.",null,null],[0,"pool","","",null,null],[3,"Pool","simple_parallel::pool","A thread pool.",null,null],[3,"JobHandle","","A token representing a job submitted to the thread pool.",null,null],[3,"UnorderedParMap","","A parallel-mapping iterator, that yields elements in the order\nthey are computed, not the order from which they are yielded by\nthe underlying iterator.",null,null],[3,"ParMap","","A parallel-mapping iterator, that yields elements in the order\nthey are yielded by the underlying iterator.",null,null],[11,"wait","","Block until the job is finished.",0,{"inputs":[{"name":"jobhandle"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"jobhandle"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"pool"}],"output":null}],[11,"new","","Create a new thread pool with `n_threads` worker threads.",1,{"inputs":[{"name":"pool"},{"name":"usize"}],"output":{"name":"pool"}}],[11,"for_","","Execute `f` on each element of `iter`.",1,{"inputs":[{"name":"pool"},{"name":"iter"},{"name":"f"}],"output":null}],[11,"unordered_map","","Execute `f` on each element in `iter` in parallel across the\npool's threads, with unspecified yield order.",1,{"inputs":[{"name":"pool"},{"name":"i"},{"name":"f"}],"output":{"name":"unorderedparmap"}}],[11,"map","","Execute `f` on `iter` in parallel across the pool's threads,\nreturning an iterator that yields the results in the order of\nthe elements of `iter` to which they correspond.",1,{"inputs":[{"name":"pool"},{"name":"i"},{"name":"f"}],"output":{"name":"parmap"}}],[11,"execute","","Run a job on the thread pool.",1,{"inputs":[{"name":"pool"},{"name":"a"},{"name":"genfn"},{"name":"mainfn"}],"output":{"name":"jobhandle"}}],[6,"Item","","",null,null],[11,"next","","",2,{"inputs":[{"name":"unorderedparmap"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",3,{"inputs":[{"name":"parmap"}],"output":{"name":"option"}}],[0,"one_to_one","simple_parallel","",null,null],[3,"UnorderedParMap","simple_parallel::one_to_one","A parallel-mapping iterator that doesn't care about the order in\nwhich elements come out.",null,null],[3,"ParMap","","A parallel-mapping iterator.",null,null],[5,"unordered_map","","Execute `f` on each element in `iter`, with unspecified yield order.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"unorderedparmap"}}],[5,"map","","Execute `f` on `iter`, yielding the results in the order the\ncorrespond to in `iter`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"parmap"}}],[11,"next","","",4,null],[11,"next","","",5,null]],"paths":[[3,"JobHandle"],[3,"Pool"],[3,"UnorderedParMap"],[3,"ParMap"],[3,"UnorderedParMap"],[3,"ParMap"]]};
initSearch(searchIndex);
